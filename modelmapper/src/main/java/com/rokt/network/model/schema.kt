/**
 * Generated by typeshare 1.13.0
 */

package com.rokt.network.model

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName

@Serializable
data class AccessibilityGroupedModel<T>(
    val child: T,
)

@Serializable
data class ThemeUrl(
    val light: String,
    val dark: String? = null,
)

@Serializable
enum class BackgroundImagePosition(val string: String) {
    @SerialName("top")
    Top("top"),

    @SerialName("right")
    Right("right"),

    @SerialName("bottom")
    Bottom("bottom"),

    @SerialName("left")
    Left("left"),

    @SerialName("center")
    Center("center"),

    @SerialName("top-right")
    TopRight("top-right"),

    @SerialName("top-left")
    TopLeft("top-left"),

    @SerialName("bottom-left")
    BottomLeft("bottom-left"),

    @SerialName("bottom-right")
    BottomRight("bottom-right"),
}

@Serializable
enum class BackgroundImageScale(val string: String) {
    @SerialName("crop")
    Crop("crop"),

    @SerialName("fit")
    Fit("fit"),

    @SerialName("fill")
    Fill("fill"),
}

@Serializable
data class BackgroundImage(
    val url: ThemeUrl,
    val position: BackgroundImagePosition? = null,
    val scale: BackgroundImageScale? = null,
)

@Serializable
data class ThemeColor(
    val light: String,
    val dark: String? = null,
)

@Serializable
data class BackgroundStylingProperties(
    val backgroundColor: ThemeColor? = null,
    val backgroundImage: BackgroundImage? = null,
)

@Serializable
data class BasicStateStylingBlock<T>(
    val default: T,
    val pressed: T? = null,
    val hovered: T? = null,
    val focussed: T? = null,
    val disabled: T? = null,
)

@Serializable
sealed class DimensionWidthValue {
    @Serializable
    @SerialName("fixed")
    data class Fixed(val value: Float) : DimensionWidthValue()

    @Serializable
    @SerialName("percentage")
    data class Percentage(val value: Float) : DimensionWidthValue()

    @Serializable
    @SerialName("fit")
    data class Fit(val value: DimensionWidthFitValue) : DimensionWidthValue()
}

@Serializable
sealed class DimensionHeightValue {
    @Serializable
    @SerialName("fixed")
    data class Fixed(val value: Float) : DimensionHeightValue()

    @Serializable
    @SerialName("percentage")
    data class Percentage(val value: Float) : DimensionHeightValue()

    @Serializable
    @SerialName("fit")
    data class Fit(val value: DimensionHeightFitValue) : DimensionHeightValue()
}

@Serializable
data class DimensionStylingProperties(
    val minWidth: Float? = null,
    val maxWidth: Float? = null,
    val width: DimensionWidthValue? = null,
    val minHeight: Float? = null,
    val maxHeight: Float? = null,
    val height: DimensionHeightValue? = null,
    val rotateZ: Float? = null,
)

@Serializable
enum class FlexAlignment(val string: String) {
    @SerialName("center")
    Center("center"),

    @SerialName("flex-start")
    FlexStart("flex-start"),

    @SerialName("flex-end")
    FlexEnd("flex-end"),

    @SerialName("stretch")
    Stretch("stretch"),
}

@Serializable
data class FlexChildStylingProperties(
    val weight: Float? = null,
    val order: Int? = null,
    val alignSelf: FlexAlignment? = null,
)

@Serializable
data class SpacingStylingProperties(
    val padding: String? = null,
    val margin: String? = null,
    val offset: String? = null,
)

@Serializable
enum class FontWeight(val string: String) {
    @SerialName("100")
    W100("100"),

    @SerialName("200")
    W200("200"),

    @SerialName("300")
    W300("300"),

    @SerialName("400")
    W400("400"),

    @SerialName("500")
    W500("500"),

    @SerialName("600")
    W600("600"),

    @SerialName("700")
    W700("700"),

    @SerialName("800")
    W800("800"),

    @SerialName("900")
    W900("900"),
}

@Serializable
enum class FontJustification(val string: String) {
    @SerialName("left")
    Left("left"),

    @SerialName("right")
    Right("right"),

    @SerialName("center")
    Center("center"),

    @SerialName("start")
    Start("start"),

    @SerialName("end")
    End("end"),

    @SerialName("justify")
    Justify("justify"),
}

@Serializable
enum class FontBaselineAlignment(val string: String) {
    @SerialName("super")
    Super("super"),

    @SerialName("sub")
    Sub("sub"),

    @SerialName("baseline")
    Baseline("baseline"),
}

@Serializable
enum class FontStyle(val string: String) {
    @SerialName("normal")
    Normal("normal"),

    @SerialName("italic")
    Italic("italic"),
}

@Serializable
enum class TextTransform(val string: String) {
    @SerialName("capitalize")
    Capitalize("capitalize"),

    @SerialName("uppercase")
    Uppercase("uppercase"),

    @SerialName("lowercase")
    Lowercase("lowercase"),

    @SerialName("none")
    None("none"),
}

@Serializable
enum class TextDecoration(val string: String) {
    @SerialName("underline")
    Underline("underline"),

    @SerialName("strike-through")
    StrikeThrough("strike-through"),

    @SerialName("none")
    None("none"),
}

@Serializable
data class TextStylingProperties(
    val textColor: ThemeColor? = null,
    val fontSize: Float? = null,
    val fontFamily: String? = null,
    val fontWeight: FontWeight? = null,
    val lineHeight: Float? = null,
    val horizontalTextAlign: FontJustification? = null,
    val baselineTextAlign: FontBaselineAlignment? = null,
    val fontStyle: FontStyle? = null,
    val textTransform: TextTransform? = null,
    val letterSpacing: Float? = null,
    val textDecoration: TextDecoration? = null,
    val lineLimit: Int? = null,
)

@Serializable
data class BasicTextStyle(
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val text: TextStylingProperties? = null,
)

@Serializable
data class BasicTextElements(
    val own: List<BasicStateStylingBlock<BasicTextStyle>>,
)

@Serializable
data class LayoutStyle<ElementsStyles, ConditionalTransitionsStyles>(
    val elements: ElementsStyles? = null,
    val conditionalTransitions: ConditionalTransitionsStyles? = null,
)

@Serializable
data class ConditionalStyleTransition<Styles, Predicates>(
    val predicates: List<Predicates>,
    val duration: Int,
    val value: Styles,
)

@Serializable
data class BasicTextModel<Predicates>(
    val styles: LayoutStyle<BasicTextElements, ConditionalStyleTransition<BasicTextTransitions, Predicates>>? = null,
    val value: String,
)

@Serializable
data class BasicTextTransitions(
    val own: BasicTextStyle? = null,
)

@Serializable
enum class BorderStyle(val string: String) {
    @SerialName("solid")
    Solid("solid"),

    @SerialName("dashed")
    Dashed("dashed"),
}

@Serializable
data class BorderStylingProperties(
    val borderRadius: Float? = null,
    val borderColor: ThemeColor? = null,
    val borderWidth: String? = null,
    val borderStyle: BorderStyle? = null,
)

@Serializable
enum class FlexJustification(val string: String) {
    @SerialName("center")
    Center("center"),

    @SerialName("flex-start")
    FlexStart("flex-start"),

    @SerialName("flex-end")
    FlexEnd("flex-end"),
}

@Serializable
data class Shadow(
    val offsetX: Float? = null,
    val offsetY: Float? = null,
    val blurRadius: Float? = null,
    val spreadRadius: Float? = null,
    val color: ThemeColor,
)

@Serializable
enum class Overflow(val string: String) {
    @SerialName("hidden")
    Hidden("hidden"),

    @SerialName("visible")
    Visible("visible"),
}

@Serializable
data class ContainerStylingProperties(
    val justifyContent: FlexJustification? = null,
    val alignItems: FlexAlignment? = null,
    val shadow: Shadow? = null,
    val overflow: Overflow? = null,
    val gap: Float? = null,
    val blur: Float? = null,
)

@Serializable
data class BottomSheetStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class BottomSheetWrapperStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
)

@Serializable
data class BottomSheetElements(
    val own: List<BasicStateStylingBlock<BottomSheetStyles>>,
    val wrapper: List<BasicStateStylingBlock<BottomSheetWrapperStyles>>,
)

@Serializable
data class BottomSheetModel<Children, Predicates>(
    val allowBackdropToClose: Boolean,
    val styles: LayoutStyle<BottomSheetElements, ConditionalStyleTransition<BottomSheetTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class BottomSheetTransitions(
    val own: BottomSheetStyles? = null,
    val wrapper: BottomSheetWrapperStyles? = null,
)

@Serializable
enum class OrderableWhenCondition(val string: String) {
    @SerialName("is")
    Is("is"),

    @SerialName("is-not")
    IsNot("is-not"),

    @SerialName("is-below")
    IsBelow("is-below"),

    @SerialName("is-above")
    IsAbove("is-above"),
}

@Serializable
data class BreakpointPredicate(
    val condition: OrderableWhenCondition,
    val value: String,
)

@Serializable
data class StatelessStylingBlock<T>(
    val default: T,
)

@Serializable
data class CarouselDistributionStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class CarouselDistributionElements(
    val own: List<StatelessStylingBlock<CarouselDistributionStyles>>,
)

@Serializable
sealed class PeekThroughSize {
    @Serializable
    @SerialName("Fixed")
    data class Fixed(val value: Float) : PeekThroughSize()

    @Serializable
    @SerialName("Percentage")
    data class Percentage(val value: Float) : PeekThroughSize()
}

@Serializable
data class CarouselDistributionModel<Predicates>(
    val viewableItems: List<UByte>,
    val peekThroughSize: List<PeekThroughSize>,
    val styles: LayoutStyle<CarouselDistributionElements, ConditionalStyleTransition<CarouselDistributionTransitions, Predicates>>? = null,
)

@Serializable
data class CarouselDistributionTransitions(
    val own: CarouselDistributionStyles? = null,
)

@Serializable
data class CatalogResponseButtonStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class CatalogResponseButtonElements(
    val own: List<BasicStateStylingBlock<CatalogResponseButtonStyles>>,
)

@Serializable
data class CatalogResponseButtonModel<Children, Predicates>(
    val styles: LayoutStyle<CatalogResponseButtonElements, ConditionalStyleTransition<CatalogResponseButtonTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class CatalogResponseButtonTransitions(
    val own: CatalogResponseButtonStyles? = null,
)

@Serializable
data class CatalogStackedCollectionStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class CatalogStackedCollectionElements(
    val own: List<StatelessStylingBlock<CatalogStackedCollectionStyles>>,
)

@Serializable
data class CatalogStackedCollectionModel<NodeTemplate, Predicates>(
    val styles: LayoutStyle<CatalogStackedCollectionElements, ConditionalStyleTransition<CatalogStackedCollectionTransitions, Predicates>>? = null,
    val template: NodeTemplate,
)

@Serializable
data class CatalogStackedCollectionTransitions(
    val own: CatalogStackedCollectionStyles? = null,
)

@Serializable
data class CloseButtonStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class CloseButtonElements(
    val own: List<BasicStateStylingBlock<CloseButtonStyles>>,
)

@Serializable
data class CloseButtonModel<Children, Predicates>(
    val styles: LayoutStyle<CloseButtonElements, ConditionalStyleTransition<CloseButtonTransitions, Predicates>>? = null,
    val children: List<Children>,
    val dismissalMethod: String? = null,
)

@Serializable
data class CloseButtonTransitions(
    val own: CloseButtonStyles? = null,
)

@Serializable
data class ColumnStyle(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class ColumnElements(
    val own: List<BasicStateStylingBlock<ColumnStyle>>,
)

@Serializable
data class ColumnModel<Children, Predicates>(
    val styles: LayoutStyle<ColumnElements, ConditionalStyleTransition<ColumnTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class EscapeHatchModel<Children>(
    val data: String,
    val backupElement: Children? = null,
)

@Serializable
data class ColumnTransitions(
    val own: ColumnStyle? = null,
)

@Serializable
enum class ExistenceWhenCondition(val string: String) {
    @SerialName("exists")
    Exists("exists"),

    @SerialName("not-exists")
    NotExists("not-exists"),
}

@Serializable
data class CreativeCopyPredicate(
    val condition: ExistenceWhenCondition,
    val value: String,
)

@Serializable
data class CreativeResponseStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class CreativeResponseElements(
    val own: List<BasicStateStylingBlock<CreativeResponseStyles>>,
)

@Serializable
enum class LinkOpenTarget(val string: String) {
    @SerialName("internally")
    Internally("internally"),

    @SerialName("externally")
    Externally("externally"),
}

@Serializable
data class CreativeResponseModel<Children, Predicates>(
    val responseKey: String,
    val styles: LayoutStyle<CreativeResponseElements, ConditionalStyleTransition<CreativeResponseTransitions, Predicates>>? = null,
    val openLinks: LinkOpenTarget? = null,
    val children: List<Children>,
)

@Serializable
data class CreativeResponseTransitions(
    val own: CreativeResponseStyles? = null,
)

@Serializable
data class CustomStatePredicate(
    val key: String,
    val condition: OrderableWhenCondition,
    val value: Int,
)

@Serializable
enum class EqualityWhenCondition(val string: String) {
    @SerialName("is")
    Is("is"),

    @SerialName("is-not")
    IsNot("is-not"),
}

@Serializable
data class DarkModePredicate(
    val condition: EqualityWhenCondition,
    val value: Boolean,
)

@Serializable
data class DataIconStyles(
    val text: TextStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
)

@Serializable
data class DataIconElements(
    val own: List<BasicStateStylingBlock<DataIconStyles>>,
)

@Serializable
data class DataIconModel<Predicates>(
    val styles: LayoutStyle<DataIconElements, ConditionalStyleTransition<DataIconTransitions, Predicates>>? = null,
    val iconKey: String,
)

@Serializable
data class DataIconTransitions(
    val own: DataIconStyles? = null,
)

@Serializable
data class DataImageStyles(
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class DataImageElements(
    val own: List<BasicStateStylingBlock<DataImageStyles>>,
)

@Serializable
data class DataImageModel<Predicates>(
    val styles: LayoutStyle<DataImageElements, ConditionalStyleTransition<DataImageTransitions, Predicates>>? = null,
    val imageKey: String,
)

@Serializable
data class DataImageTransitions(
    val own: DataImageStyles? = null,
)

@Serializable
enum class DomainStateKey(val string: String) {
    @SerialName("offerComplete")
    OfferComplete("offerComplete"),
}

@Serializable
data class DomainStatePredicate<DomainStateKey>(
    val key: DomainStateKey,
    val condition: OrderableWhenCondition,
    val value: Int,
)

@Serializable
data class FadeInOutTransitionSettings(
    val duration: Int,
)

@Serializable
data class FadeInTransitionSettings(
    val duration: Int,
)

@Serializable
data class FadeOutTransitionSettings(
    val duration: Int,
)

@Serializable
data class GroupedDistributionStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class GroupedDistributionElements(
    val own: List<StatelessStylingBlock<GroupedDistributionStyles>>,
)

@Serializable
sealed class Transition {
    @Serializable
    @SerialName("FadeInOut")
    data class FadeInOut(val settings: FadeInOutTransitionSettings) : Transition()
}

@Serializable
data class GroupedDistributionModel<Predicates>(
    val viewableItems: List<UByte>,
    val transition: Transition,
    val styles: LayoutStyle<GroupedDistributionElements, ConditionalStyleTransition<GroupedDistributionTransitions, Predicates>>? = null,
)

@Serializable
data class GroupedDistributionTransitions(
    val own: GroupedDistributionStyles? = null,
)

@Serializable
data class InlineTextStylingProperties(
    val textColor: ThemeColor? = null,
    val fontSize: Float? = null,
    val fontFamily: String? = null,
    val fontWeight: FontWeight? = null,
    val baselineTextAlign: FontBaselineAlignment? = null,
    val fontStyle: FontStyle? = null,
    val textTransform: TextTransform? = null,
    val letterSpacing: Float? = null,
    val textDecoration: TextDecoration? = null,
)

@Serializable
data class InLineTextStyle(
    val text: InlineTextStylingProperties,
)

@Serializable
data class IndicatorStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
    val text: TextStylingProperties? = null,
)

@Serializable
data class LayoutSchemaDomainStatePredicate(
    val key: DomainStateKey,
    val condition: OrderableWhenCondition,
    val value: Int,
)

@Serializable
data class LayoutSettings(
    val closeOnComplete: Boolean? = null,
)

@Serializable
data class OneByOneDistributionStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class OneByOneDistributionElements(
    val own: List<StatelessStylingBlock<OneByOneDistributionStyles>>,
)

@Serializable
data class OneByOneDistributionModel<Predicates>(
    val styles: LayoutStyle<OneByOneDistributionElements, ConditionalStyleTransition<OneByOneDistributionTransitions, Predicates>>? = null,
    val transition: Transition,
)

@Serializable
data class OneByOneDistributionTransitions(
    val own: OneByOneDistributionStyles? = null,
)

@Serializable
data class OverlayStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class OverlayWrapperStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
)

@Serializable
data class OverlayElements(
    val own: List<BasicStateStylingBlock<OverlayStyles>>,
    val wrapper: List<BasicStateStylingBlock<OverlayWrapperStyles>>,
)

@Serializable
data class OverlayModel<Children, Predicates>(
    val allowBackdropToClose: Boolean,
    val styles: LayoutStyle<OverlayElements, ConditionalStyleTransition<OverlayTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class OverlayTransitions(
    val own: OverlayStyles? = null,
    val wrapper: OverlayWrapperStyles? = null,
)

@Serializable
data class PositionPredicate(
    val condition: OrderableWhenCondition,
    val value: String,
)

@Serializable
data class ProgressControlStyle(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class ProgressControlElements(
    val own: List<BasicStateStylingBlock<ProgressControlStyle>>,
)

@Serializable
enum class ProgressionDirection(val string: String) {
    @SerialName("Forward")
    Forward("Forward"),

    @SerialName("Backward")
    Backward("Backward"),
}

@Serializable
data class ProgressControlModel<Children, Predicates>(
    val styles: LayoutStyle<ProgressControlElements, ConditionalStyleTransition<ProgressControlTransitions, Predicates>>? = null,
    val direction: ProgressionDirection,
    val children: List<Children>,
)

@Serializable
data class ProgressControlTransitions(
    val own: ProgressControlStyle? = null,
)

@Serializable
data class ProgressIndicatorStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class ProgressIndicatorElements(
    val own: List<BasicStateStylingBlock<ProgressIndicatorStyles>>,
    val indicator: List<BasicStateStylingBlock<IndicatorStyles>>,
    val activeIndicator: List<BasicStateStylingBlock<IndicatorStyles>>? = null,
    val seenIndicator: List<BasicStateStylingBlock<IndicatorStyles>>? = null,
)

@Serializable
data class ProgressIndicatorModel<Predicates>(
    val styles: LayoutStyle<ProgressIndicatorElements, ConditionalStyleTransition<ProgressIndicatorTransitions, Predicates>>? = null,
    val indicator: String,
    val startPosition: Int? = null,
    val accessibilityHidden: Boolean? = null,
)

@Serializable
data class ProgressIndicatorTransitions(
    val own: ProgressIndicatorStyles? = null,
    val indicator: IndicatorStyles? = null,
    val activeIndicator: IndicatorStyles? = null,
    val seenIndicator: IndicatorStyles? = null,
)

@Serializable
data class ProgressionPredicate(
    val condition: OrderableWhenCondition,
    val value: String,
)

@Serializable
data class RichTextStyle(
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val text: TextStylingProperties? = null,
)

@Serializable
data class RichTextElements(
    val own: List<BasicStateStylingBlock<RichTextStyle>>,
    val link: List<BasicStateStylingBlock<InLineTextStyle>>? = null,
)

@Serializable
data class RichTextModel<Predicates>(
    val styles: LayoutStyle<RichTextElements, ConditionalStyleTransition<RichTextTransitions, Predicates>>? = null,
    val openLinks: LinkOpenTarget? = null,
    val value: String,
)

@Serializable
data class RichTextTransitions(
    val own: RichTextStyle? = null,
    val link: InLineTextStyle? = null,
)

@Serializable
data class RootSchemaModel<Layout, Display, Settings>(
    val breakpoints: HashMap<String, Float>,
    val layout: Layout,
    val settings: Settings? = null,
    val display: Display? = null,
)

@Serializable
data class RowStyle(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class RowElements(
    val own: List<BasicStateStylingBlock<RowStyle>>,
)

@Serializable
data class RowModel<Children, Predicates>(
    val styles: LayoutStyle<RowElements, ConditionalStyleTransition<RowTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class RowTransitions(
    val own: RowStyle? = null,
)

@Serializable
data class ScrollableColumnStyle(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class ScrollableColumnElements(
    val own: List<BasicStateStylingBlock<ScrollableColumnStyle>>,
)

@Serializable
data class ScrollableColumnModel<Children, Predicates>(
    val styles: LayoutStyle<ScrollableColumnElements, ConditionalStyleTransition<ScrollableColumnTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class ScrollableColumnTransitions(
    val own: ScrollableColumnStyle? = null,
)

@Serializable
data class ScrollableRowStyle(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class ScrollableRowElements(
    val own: List<BasicStateStylingBlock<ScrollableRowStyle>>,
)

@Serializable
data class ScrollableRowModel<Children, Predicates>(
    val styles: LayoutStyle<ScrollableRowElements, ConditionalStyleTransition<ScrollableRowTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class ScrollableRowTransitions(
    val own: ScrollableRowStyle? = null,
)

@Serializable
data class SlideStateTriggerOwnStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class SlideStateTriggerThumbStyles(
    val text: TextStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class SlideStateTriggerLabelStyles(
    val text: TextStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class SlideStateTriggerFillStyles(
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
)

@Serializable
data class SlideStateTriggerElements(
    val own: List<StatelessStylingBlock<SlideStateTriggerOwnStyles>>,
    val thumb: List<StatelessStylingBlock<SlideStateTriggerThumbStyles>>? = null,
    val label: List<StatelessStylingBlock<SlideStateTriggerLabelStyles>>? = null,
    val fill: List<StatelessStylingBlock<SlideStateTriggerFillStyles>>? = null,
)

@Serializable
data class SlideStateTriggerLabel(
    val value: String? = null,
)

@Serializable
data class SlideStateTriggerThumb(
    val icon: String? = null,
)

@Serializable
data class SlideStateTriggerModel<Predicates>(
    val styles: LayoutStyle<SlideStateTriggerElements, ConditionalStyleTransition<SlideStateTriggerTransitions, Predicates>>? = null,
    val thumb: SlideStateTriggerThumb? = null,
    val label: SlideStateTriggerLabel? = null,
    val customStateKey: String,
    val customStateValue: Int? = null,
)

@Serializable
data class SlideStateTriggerTransitions(
    val own: SlideStateTriggerOwnStyles? = null,
    val thumb: SlideStateTriggerThumbStyles? = null,
    val label: SlideStateTriggerLabelStyles? = null,
    val fill: SlideStateTriggerFillStyles? = null,
)

@Serializable
enum class BooleanWhenCondition(val string: String) {
    @SerialName("is-true")
    IsTrue("is-true"),

    @SerialName("is-false")
    IsFalse("is-false"),
}

@Serializable
data class StaticBooleanPredicate(
    val condition: BooleanWhenCondition,
    val value: Boolean,
)

@Serializable
data class StaticIconStyles(
    val text: TextStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
)

@Serializable
data class StaticIconElements(
    val own: List<BasicStateStylingBlock<StaticIconStyles>>,
)

@Serializable
data class StaticIconModel<Predicates>(
    val styles: LayoutStyle<StaticIconElements, ConditionalStyleTransition<StaticIconTransitions, Predicates>>? = null,
    val name: String,
    val description: String? = null,
)

@Serializable
data class StaticIconTransitions(
    val own: StaticIconStyles? = null,
)

@Serializable
data class StaticImageStyles(
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class StaticImageElements(
    val own: List<BasicStateStylingBlock<StaticImageStyles>>,
)

@Serializable
data class StaticImageUrl(
    val light: String,
    val dark: String? = null,
)

@Serializable
data class StaticImageModel<Predicates>(
    val styles: LayoutStyle<StaticImageElements, ConditionalStyleTransition<StaticImageTransitions, Predicates>>? = null,
    val alt: String? = null,
    val title: String? = null,
    val url: StaticImageUrl,
)

@Serializable
data class StaticImageTransitions(
    val own: StaticImageStyles? = null,
)

@Serializable
data class StaticLinkStyles(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class StaticLinkElements(
    val own: List<BasicStateStylingBlock<StaticLinkStyles>>,
)

@Serializable
data class StaticLinkModel<Children, Predicates>(
    val src: String,
    val open: LinkOpenTarget,
    val styles: LayoutStyle<StaticLinkElements, ConditionalStyleTransition<StaticLinkTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class StaticLinkTransitions(
    val own: StaticLinkStyles? = null,
)

@Serializable
data class StaticStringPredicate(
    val input: String,
    val condition: EqualityWhenCondition,
    val value: String,
)

@Serializable
data class ToggleButtonStateTriggerStyle(
    val container: ContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class ToggleButtonStateTriggerElements(
    val own: List<BasicStateStylingBlock<ToggleButtonStateTriggerStyle>>,
)

@Serializable
data class ToggleButtonStateTriggerModel<Children, Predicates>(
    val styles: LayoutStyle<ToggleButtonStateTriggerElements, ConditionalStyleTransition<ToggleButtonStateTriggerTransitions, Predicates>>? = null,
    val children: List<Children>,
    val customStateKey: String,
)

@Serializable
data class ToggleButtonStateTriggerTransitions(
    val own: ToggleButtonStateTriggerStyle? = null,
)

@Serializable
sealed class InTransition {
    @Serializable
    @SerialName("FadeIn")
    data class FadeIn(val settings: FadeInTransitionSettings) : InTransition()
}

@Serializable
sealed class OutTransition {
    @Serializable
    @SerialName("FadeOut")
    data class FadeOut(val settings: FadeOutTransitionSettings) : OutTransition()
}

@Serializable
data class WhenTransition(
    val inTransition: List<InTransition>? = null,
    val outTransition: List<OutTransition>? = null,
)

@Serializable
enum class WhenHidden(val string: String) {
    @SerialName("visually")
    Visually("visually"),

    @SerialName("functionally")
    Functionally("functionally"),
}

@Serializable
data class WhenModel<Children, Predicates>(
    val predicates: List<Predicates>,
    val children: List<Children>,
    val transition: WhenTransition? = null,
    val hide: WhenHidden? = null,
)

@Serializable
data class ZStackContainerStylingProperties(
    val justifyContent: FlexJustification? = null,
    val alignItems: FlexAlignment? = null,
    val shadow: Shadow? = null,
    val overflow: Overflow? = null,
    val blur: Float? = null,
)

@Serializable
data class ZStackStyle(
    val container: ZStackContainerStylingProperties? = null,
    val background: BackgroundStylingProperties? = null,
    val border: BorderStylingProperties? = null,
    val dimension: DimensionStylingProperties? = null,
    val flexChild: FlexChildStylingProperties? = null,
    val spacing: SpacingStylingProperties? = null,
)

@Serializable
data class ZStackElements(
    val own: List<BasicStateStylingBlock<ZStackStyle>>,
)

@Serializable
data class ZStackModel<Children, Predicates>(
    val styles: LayoutStyle<ZStackElements, ConditionalStyleTransition<ZStackTransitions, Predicates>>? = null,
    val children: List<Children>,
)

@Serializable
data class ZStackTransitions(
    val own: ZStackStyle? = null,
)

@Serializable
sealed class AccessibilityGroupedLayoutChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<AccessibilityGroupedLayoutChildren, WhenPredicate>) :
        AccessibilityGroupedLayoutChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<AccessibilityGroupedLayoutChildren, WhenPredicate>) :
        AccessibilityGroupedLayoutChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<AccessibilityGroupedLayoutChildren, WhenPredicate>) :
        AccessibilityGroupedLayoutChildren()
}

@Serializable
sealed class CatalogStackedCollectionLayoutSchemaTemplateNode {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<LayoutSchemaModel, WhenPredicate>) :
        CatalogStackedCollectionLayoutSchemaTemplateNode()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<LayoutSchemaModel, WhenPredicate>) :
        CatalogStackedCollectionLayoutSchemaTemplateNode()
}

@Serializable
sealed class CatalogStackedCollectionTemplateNode {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<CatalogStackedCollectionTemplateNodeChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNode()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<CatalogStackedCollectionTemplateNodeChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNode()
}

@Serializable
sealed class CatalogStackedCollectionTemplateNodeChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<CatalogStackedCollectionTemplateNodeChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<CatalogStackedCollectionTemplateNodeChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<CatalogStackedCollectionTemplateNodeChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<CatalogStackedCollectionTemplateNodeChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("SlideStateTrigger")
    data class SlideStateTrigger(val node: SlideStateTriggerModel<LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()

    @Serializable
    @SerialName("CatalogResponseButton")
    data class CatalogResponseButton(val node: CatalogResponseButtonModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        CatalogStackedCollectionTemplateNodeChildren()
}

@Serializable
enum class DimensionHeightFitValue(val string: String) {
    @SerialName("wrap-content")
    WrapContent("wrap-content"),

    @SerialName("fit-height")
    FitHeight("fit-height"),
}

@Serializable
enum class DimensionWidthFitValue(val string: String) {
    @SerialName("wrap-content")
    WrapContent("wrap-content"),

    @SerialName("fit-width")
    FitWidth("fit-width"),
}

@Serializable
enum class LayoutDisplayPreset(val string: String) {
    @SerialName("FULLSCREEN")
    FullScreen("FULLSCREEN"),

    @SerialName("EMBEDDED")
    Embedded("EMBEDDED"),

    @SerialName("BOTTOMSHEET")
    BottomSheet("BOTTOMSHEET"),
}

@Serializable
sealed class LayoutSchemaModel {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("ScrollableColumn")
    data class ScrollableColumn(val node: ScrollableColumnModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("ScrollableRow")
    data class ScrollableRow(val node: ScrollableRowModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        LayoutSchemaModel()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("ProgressIndicator")
    data class ProgressIndicator(val node: ProgressIndicatorModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("CreativeResponse")
    data class CreativeResponse(val node: CreativeResponseModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("OneByOneDistribution")
    data class OneByOneDistribution(val node: OneByOneDistributionModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("Overlay")
    data class Overlay(val node: OverlayModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("BottomSheet")
    data class BottomSheet(val node: BottomSheetModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("CarouselDistribution")
    data class CarouselDistribution(val node: CarouselDistributionModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("ProgressControl")
    data class ProgressControl(val node: ProgressControlModel<LayoutSchemaModel, WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("GroupedDistribution")
    data class GroupedDistribution(val node: GroupedDistributionModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("SlideStateTrigger")
    data class SlideStateTrigger(val node: SlideStateTriggerModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<WhenPredicate>) : LayoutSchemaModel()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<LayoutSchemaModel, WhenPredicate>) :
        LayoutSchemaModel()

    @Serializable
    @SerialName("CatalogStackedCollection")
    data class CatalogStackedCollection(val node: CatalogStackedCollectionModel<CatalogStackedCollectionLayoutSchemaTemplateNode, WhenPredicate>) :
        LayoutSchemaModel()

    @Serializable
    @SerialName("CatalogResponseButton")
    data class CatalogResponseButton(val node: CatalogResponseButtonModel<LayoutSchemaModel, WhenPredicate>) :
        LayoutSchemaModel()

    @Serializable
    @SerialName("EscapeHatch")
    data class EscapeHatch(val node: EscapeHatchModel<LayoutSchemaModel>) : LayoutSchemaModel()
}

@Serializable
sealed class LayoutVariantChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("ScrollableColumn")
    data class ScrollableColumn(val node: ScrollableColumnModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("ScrollableRow")
    data class ScrollableRow(val node: ScrollableRowModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("CreativeResponse")
    data class CreativeResponse(val node: CreativeResponseModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<LayoutVariantWhenPredicate>) : LayoutVariantChildren()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()

    @Serializable
    @SerialName("CatalogStackedCollection")
    data class CatalogStackedCollection(val node: CatalogStackedCollectionModel<CatalogStackedCollectionTemplateNode, LayoutVariantWhenPredicate>) :
        LayoutVariantChildren()
}

@Serializable
enum class LayoutVariantDomainStateKey(val string: String) {
    @SerialName("offerComplete")
    OfferComplete("offerComplete"),
}

@Serializable
sealed class LayoutVariantNonInteractableChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<LayoutVariantWhenPredicate>) : LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<LayoutVariantWhenPredicate>) :
        LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<LayoutVariantWhenPredicate>) : LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<LayoutVariantWhenPredicate>) : LayoutVariantNonInteractableChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<LayoutVariantWhenPredicate>) :
        LayoutVariantNonInteractableChildren()
}

@Serializable
sealed class LayoutVariantSchemaModel {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("ScrollableColumn")
    data class ScrollableColumn(val node: ScrollableColumnModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("ScrollableRow")
    data class ScrollableRow(val node: ScrollableRowModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("CreativeResponse")
    data class CreativeResponse(val node: CreativeResponseModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<LayoutVariantChildren, LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<LayoutVariantWhenPredicate>) : LayoutVariantSchemaModel()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()

    @Serializable
    @SerialName("CatalogStackedCollection")
    data class CatalogStackedCollection(val node: CatalogStackedCollectionModel<CatalogStackedCollectionTemplateNode, LayoutVariantWhenPredicate>) :
        LayoutVariantSchemaModel()
}

@Serializable
sealed class LayoutVariantWhenPredicate {
    @Serializable
    @SerialName("Breakpoint")
    data class Breakpoint(val predicate: BreakpointPredicate) : LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("Position")
    data class Position(val predicate: PositionPredicate) : LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("Progression")
    data class Progression(val predicate: ProgressionPredicate) : LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("DarkMode")
    data class DarkMode(val predicate: DarkModePredicate) : LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("CreativeCopy")
    data class CreativeCopy(val predicate: CreativeCopyPredicate) : LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("StaticBoolean")
    data class StaticBoolean(val predicate: StaticBooleanPredicate) : LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("CustomState")
    data class CustomState(val predicate: CustomStatePredicate) : LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("DomainState")
    data class DomainState(val predicate: DomainStatePredicate<LayoutVariantDomainStateKey>) :
        LayoutVariantWhenPredicate()

    @Serializable
    @SerialName("StaticString")
    data class StaticString(val predicate: StaticStringPredicate) : LayoutVariantWhenPredicate()
}

@Serializable
sealed class ModalChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<ModalChildren, OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<ModalChildren, OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("ScrollableColumn")
    data class ScrollableColumn(val node: ScrollableColumnModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        ModalChildren()

    @Serializable
    @SerialName("ScrollableRow")
    data class ScrollableRow(val node: ScrollableRowModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        ModalChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<ModalChildren, OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        ModalChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("ProgressIndicator")
    data class ProgressIndicator(val node: ProgressIndicatorModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("OneByOneDistribution")
    data class OneByOneDistribution(val node: OneByOneDistributionModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<ModalChildren, OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ModalChildren()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ModalChildren()

    @Serializable
    @SerialName("CarouselDistribution")
    data class CarouselDistribution(val node: CarouselDistributionModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("ProgressControl")
    data class ProgressControl(val node: ProgressControlModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ModalChildren()

    @Serializable
    @SerialName("GroupedDistribution")
    data class GroupedDistribution(val node: GroupedDistributionModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<OuterLayoutWhenPredicate>) : ModalChildren()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ModalChildren()
}

@Serializable
sealed class NonInteractableChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<NonInteractableChildren, WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<NonInteractableChildren, WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<NonInteractableChildren, WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<NonInteractableChildren, WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<WhenPredicate>) : NonInteractableChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<WhenPredicate>) : NonInteractableChildren()
}

@Serializable
sealed class OuterLayoutChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("ScrollableColumn")
    data class ScrollableColumn(val node: ScrollableColumnModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("ScrollableRow")
    data class ScrollableRow(val node: ScrollableRowModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("ProgressIndicator")
    data class ProgressIndicator(val node: ProgressIndicatorModel<OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("OneByOneDistribution")
    data class OneByOneDistribution(val node: OneByOneDistributionModel<OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("CarouselDistribution")
    data class CarouselDistribution(val node: CarouselDistributionModel<OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("ProgressControl")
    data class ProgressControl(val node: ProgressControlModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()

    @Serializable
    @SerialName("GroupedDistribution")
    data class GroupedDistribution(val node: GroupedDistributionModel<OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<OuterLayoutWhenPredicate>) : OuterLayoutChildren()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutChildren()
}

@Serializable
sealed class OuterLayoutNonInteractableChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutNonInteractableChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutNonInteractableChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutNonInteractableChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<OuterLayoutWhenPredicate>) : OuterLayoutNonInteractableChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<OuterLayoutWhenPredicate>) : OuterLayoutNonInteractableChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutNonInteractableChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<OuterLayoutWhenPredicate>) : OuterLayoutNonInteractableChildren()
}

@Serializable
sealed class OuterLayoutSchemaModel {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("ScrollableColumn")
    data class ScrollableColumn(val node: ScrollableColumnModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("ScrollableRow")
    data class ScrollableRow(val node: ScrollableRowModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("ProgressIndicator")
    data class ProgressIndicator(val node: ProgressIndicatorModel<OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("OneByOneDistribution")
    data class OneByOneDistribution(val node: OneByOneDistributionModel<OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("Overlay")
    data class Overlay(val node: OverlayModel<ModalChildren, OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("BottomSheet")
    data class BottomSheet(val node: BottomSheetModel<ModalChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<OuterLayoutChildren, OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("CarouselDistribution")
    data class CarouselDistribution(val node: CarouselDistributionModel<OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("ProgressControl")
    data class ProgressControl(val node: ProgressControlModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("GroupedDistribution")
    data class GroupedDistribution(val node: GroupedDistributionModel<OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<OuterLayoutWhenPredicate>) : OuterLayoutSchemaModel()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        OuterLayoutSchemaModel()
}

@Serializable
sealed class OuterLayoutWhenPredicate {
    @Serializable
    @SerialName("Breakpoint")
    data class Breakpoint(val predicate: BreakpointPredicate) : OuterLayoutWhenPredicate()

    @Serializable
    @SerialName("Progression")
    data class Progression(val predicate: ProgressionPredicate) : OuterLayoutWhenPredicate()

    @Serializable
    @SerialName("DarkMode")
    data class DarkMode(val predicate: DarkModePredicate) : OuterLayoutWhenPredicate()

    @Serializable
    @SerialName("StaticBoolean")
    data class StaticBoolean(val predicate: StaticBooleanPredicate) : OuterLayoutWhenPredicate()

    @Serializable
    @SerialName("CustomState")
    data class CustomState(val predicate: CustomStatePredicate) : OuterLayoutWhenPredicate()

    @Serializable
    @SerialName("StaticString")
    data class StaticString(val predicate: StaticStringPredicate) : OuterLayoutWhenPredicate()
}

@Serializable
sealed class ScrollableChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<ScrollableChildren, WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<ScrollableChildren, WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<ScrollableChildren, WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        ScrollableChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("ProgressIndicator")
    data class ProgressIndicator(val node: ProgressIndicatorModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("CreativeResponse")
    data class CreativeResponse(val node: CreativeResponseModel<LayoutVariantNonInteractableChildren, WhenPredicate>) :
        ScrollableChildren()

    @Serializable
    @SerialName("OneByOneDistribution")
    data class OneByOneDistribution(val node: OneByOneDistributionModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<ScrollableChildren, WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<NonInteractableChildren, WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<OuterLayoutNonInteractableChildren, WhenPredicate>) :
        ScrollableChildren()

    @Serializable
    @SerialName("CarouselDistribution")
    data class CarouselDistribution(val node: CarouselDistributionModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("ProgressControl")
    data class ProgressControl(val node: ProgressControlModel<OuterLayoutNonInteractableChildren, WhenPredicate>) :
        ScrollableChildren()

    @Serializable
    @SerialName("GroupedDistribution")
    data class GroupedDistribution(val node: GroupedDistributionModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<WhenPredicate>) : ScrollableChildren()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<NonInteractableChildren, WhenPredicate>) :
        ScrollableChildren()

    @Serializable
    @SerialName("CatalogStackedCollection")
    data class CatalogStackedCollection(val node: CatalogStackedCollectionModel<CatalogStackedCollectionTemplateNode, WhenPredicate>) :
        ScrollableChildren()

    @Serializable
    @SerialName("CatalogResponseButton")
    data class CatalogResponseButton(val node: CatalogResponseButtonModel<LayoutVariantNonInteractableChildren, WhenPredicate>) :
        ScrollableChildren()
}

@Serializable
sealed class ScrollableLayoutVariantChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<LayoutVariantWhenPredicate>) : ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("DataImage")
    data class DataImage(val node: DataImageModel<LayoutVariantWhenPredicate>) : ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<LayoutVariantWhenPredicate>) : ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<LayoutVariantWhenPredicate>) : ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("CreativeResponse")
    data class CreativeResponse(val node: CreativeResponseModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<ScrollableLayoutVariantChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("DataIcon")
    data class DataIcon(val node: DataIconModel<LayoutVariantWhenPredicate>) : ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<LayoutVariantWhenPredicate>) : ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<LayoutVariantNonInteractableChildren, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()

    @Serializable
    @SerialName("CatalogStackedCollection")
    data class CatalogStackedCollection(val node: CatalogStackedCollectionModel<CatalogStackedCollectionTemplateNode, LayoutVariantWhenPredicate>) :
        ScrollableLayoutVariantChildren()
}

@Serializable
sealed class ScrollableOuterLayoutChildren {
    @Serializable
    @SerialName("Row")
    data class Row(val node: RowModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("Column")
    data class Column(val node: ColumnModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("ZStack")
    data class ZStack(val node: ZStackModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("AccessibilityGrouped")
    data class AccessibilityGrouped(val node: AccessibilityGroupedModel<AccessibilityGroupedLayoutChildren>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("StaticImage")
    data class StaticImage(val node: StaticImageModel<OuterLayoutWhenPredicate>) : ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("RichText")
    data class RichText(val node: RichTextModel<OuterLayoutWhenPredicate>) : ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("BasicText")
    data class BasicText(val node: BasicTextModel<OuterLayoutWhenPredicate>) : ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("ProgressIndicator")
    data class ProgressIndicator(val node: ProgressIndicatorModel<OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("OneByOneDistribution")
    data class OneByOneDistribution(val node: OneByOneDistributionModel<OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("When")
    data class When(val node: WhenModel<ScrollableOuterLayoutChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("StaticLink")
    data class StaticLink(val node: StaticLinkModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("CloseButton")
    data class CloseButton(val node: CloseButtonModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("CarouselDistribution")
    data class CarouselDistribution(val node: CarouselDistributionModel<OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("ProgressControl")
    data class ProgressControl(val node: ProgressControlModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("GroupedDistribution")
    data class GroupedDistribution(val node: GroupedDistributionModel<OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("StaticIcon")
    data class StaticIcon(val node: StaticIconModel<OuterLayoutWhenPredicate>) : ScrollableOuterLayoutChildren()

    @Serializable
    @SerialName("ToggleButtonStateTrigger")
    data class ToggleButtonStateTrigger(val node: ToggleButtonStateTriggerModel<OuterLayoutNonInteractableChildren, OuterLayoutWhenPredicate>) :
        ScrollableOuterLayoutChildren()
}

@Serializable
sealed class WhenPredicate {
    @Serializable
    @SerialName("Breakpoint")
    data class Breakpoint(val predicate: BreakpointPredicate) : WhenPredicate()

    @Serializable
    @SerialName("Position")
    data class Position(val predicate: PositionPredicate) : WhenPredicate()

    @Serializable
    @SerialName("Progression")
    data class Progression(val predicate: ProgressionPredicate) : WhenPredicate()

    @Serializable
    @SerialName("DarkMode")
    data class DarkMode(val predicate: DarkModePredicate) : WhenPredicate()

    @Serializable
    @SerialName("CreativeCopy")
    data class CreativeCopy(val predicate: CreativeCopyPredicate) : WhenPredicate()

    @Serializable
    @SerialName("StaticBoolean")
    data class StaticBoolean(val predicate: StaticBooleanPredicate) : WhenPredicate()

    @Serializable
    @SerialName("CustomState")
    data class CustomState(val predicate: CustomStatePredicate) : WhenPredicate()

    @Serializable
    @SerialName("DomainState")
    data class DomainState(val predicate: LayoutSchemaDomainStatePredicate) : WhenPredicate()

    @Serializable
    @SerialName("StaticString")
    data class StaticString(val predicate: StaticStringPredicate) : WhenPredicate()
}

