name: Release Android UX Helper

on:
  push:
    branches:
      - main
    paths:
      - VERSION

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MAVEN_SIGNING_KEY }}
      ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MAVEN_SIGNING_PASSWORD }}
      ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_USERNAME }}
      ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup JDK
        uses: ./.github/actions/setup-java
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Get version name
        id: version
        run: |
          version_from_file=$(head -n 1 VERSION)
          echo "release-version=$version_from_file" >> $GITHUB_OUTPUT
      - name: Publish to Maven local
        run: ./gradlew publishMavenPublicationToMavenLocal -PVERSION=${{ steps.version.outputs.release-version }}
      - name: Publish to Maven Central
        run: ./gradlew publishMavenPublicationToMavenCentralRepository -PVERSION=${{ steps.version.outputs.release-version }} --no-configuration-cache
      - name: Find release AAR Files
        id: find-aar
        run: |
          file_list=$(find . -path "*/build/outputs/aar/*-release.aar" | paste -sd "," -)
          echo "aar_files=$file_list" >> $GITHUB_OUTPUT
      - name: Rename AAR Files
        id: rename-aar
        run: |
          IFS=',' read -r -a aar_files <<< "${{ steps.find-aar.outputs.aar_files }}"
          new_files=()

          for file in "${aar_files[@]}"; do
            dir=$(dirname "$file")
            base=$(basename "$file" -release.aar)
            new_file="$dir/$base-${{ steps.version.outputs.release-version }}.aar"
            mv "$file" "$new_file"
            new_files+=("$new_file")
          done
          echo "renamed_aar_files=$(IFS=','; echo "${new_files[*]}")" >> $GITHUB_OUTPUT
      - name: Print Renamed AAR Files
        run: |
          echo "Renamed AAR Files: ${{ steps.rename-aar.outputs.renamed_aar_files }}"
      - uses: ffurrer2/extract-release-notes@v2
        id: extract-release-notes
        with:
          changelog_file: CHANGELOG.md
      - name: Changelog
        run: echo "${{ steps.extract-release-notes.outputs.release_notes }}"
      - name: Find POM Files
        id: find-pom
        run: |
          pom_files=$(find . -path "*/build/publications/maven/pom-default.xml" | paste -sd "," -)
          echo "pom_files=$pom_files" >> $GITHUB_OUTPUT
      - name: Find pom files
        run: |
          echo "POM files ${{ steps.find-pom.outputs.pom_files }}"
      - name: Rename POM files
        id: rename-pom
        run: |
          RELEASE_VERSION=${{ steps.version.outputs.release-version }}
          POM_FILES=${{ steps.find-pom.outputs.pom_files }}
          IFS="," read -r -a FILES <<< "$POM_FILES"

          RENAMED_FILES=()
          for file in "${FILES[@]}"; do
              PROJECT_NAME=$(basename $(dirname $(dirname $(dirname $(dirname $file)))))
              NEW_FILE_NAME="pom-${PROJECT_NAME}-${RELEASE_VERSION}.xml"
              mv "$file" "$(dirname $file)/$NEW_FILE_NAME"
              RENAMED_FILES+=("$(dirname $file)/$NEW_FILE_NAME")
              echo "Renamed $file to $(dirname $file)/$NEW_FILE_NAME"
          done
          echo "renamed_pom_files=$(IFS=","; echo "${RENAMED_FILES[*]}")" >> $GITHUB_OUTPUT
      - name: Concatenate Renamed Files
        id: concat-files
        run: |
          aar_files="${{ steps.rename-aar.outputs.renamed_aar_files }}"
          pom_files="${{ steps.rename-pom.outputs.renamed_pom_files }}"
          concatenated_files="${aar_files},${pom_files}"
          echo "concatenated_files=$concatenated_files" >> $GITHUB_OUTPUT
      - name: Print artifact paths
        run: echo "Artifact paths ${{ steps.concat-files.outputs.concatenated_files }}"
      - name: Create Github release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ steps.concat-files.outputs.concatenated_files }}
          makeLatest: true
          tag: ${{ steps.version.outputs.version }}
          body: |
            ## Release notes:
            ${{ steps.extract-release-notes.outputs.release_notes }}
